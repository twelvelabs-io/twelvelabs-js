/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as TwelvelabsApi from "./api/index";
import * as serializers from "./serialization/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import * as stream from "stream";
import { Tasks } from "./api/resources/tasks/client/Client";
import { Indexes } from "./api/resources/indexes/client/Client";
import { ManageVideos } from "./api/resources/manageVideos/client/Client";
import { Embed } from "./api/resources/embed/client/Client";
import { Search } from "./api/resources/search/client/Client";

export declare namespace TwelvelabsApiClient {
    export interface Options {
        environment?: core.Supplier<environments.TwelvelabsApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class TwelvelabsApiClient {
    protected _tasks: Tasks | undefined;
    protected _indexes: Indexes | undefined;
    protected _manageVideos: ManageVideos | undefined;
    protected _embed: Embed | undefined;
    protected _search: Search | undefined;

    constructor(protected readonly _options: TwelvelabsApiClient.Options = {}) {}

    public get tasks(): Tasks {
        return (this._tasks ??= new Tasks(this._options));
    }

    public get indexes(): Indexes {
        return (this._indexes ??= new Indexes(this._options));
    }

    public get manageVideos(): ManageVideos {
        return (this._manageVideos ??= new ManageVideos(this._options));
    }

    public get embed(): Embed {
        return (this._embed ??= new Embed(this._options));
    }

    public get search(): Search {
        return (this._search ??= new Search(this._options));
    }

    /**
     * This endpoint analyzes videos and generates summaries, chapters, or highlights. Optionally, you can provide a prompt to customize the output.
     *
     * <Note title="Note">
     * This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * </Note>
     *
     * @param {TwelvelabsApi.SummarizeRequest} request
     * @param {TwelvelabsApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     * @throws {@link TwelvelabsApi.TooManyRequestsError}
     *
     * @example
     *     await client.summarize({
     *         videoId: "6298d673f1090f1100476d4c",
     *         type: "summary",
     *         prompt: "Generate a summary of this video for a social media post, up to two sentences.",
     *         temperature: 0.2
     *     })
     */
    public summarize(
        request: TwelvelabsApi.SummarizeRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.SummarizeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__summarize(request, requestOptions));
    }

    private async __summarize(
        request: TwelvelabsApi.SummarizeRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.SummarizeResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "summarize",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SummarizeRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SummarizeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /summarize.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint analyzes videos and generates titles, topics, and hashtags.
     *
     * <Note title="Note">
     * This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * </Note>
     *
     * @param {TwelvelabsApi.GistRequest} request
     * @param {TwelvelabsApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     * @throws {@link TwelvelabsApi.TooManyRequestsError}
     *
     * @example
     *     await client.gist({
     *         videoId: "6298d673f1090f1100476d4c",
     *         types: ["title", "topic"]
     *     })
     */
    public gist(
        request: TwelvelabsApi.GistRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.Gist> {
        return core.HttpResponsePromise.fromPromise(this.__gist(request, requestOptions));
    }

    private async __gist(
        request: TwelvelabsApi.GistRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.Gist>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "gist",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.GistRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Gist.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /gist.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Warning>This endpoint will be deprecated on **July 30, 2025**. Transition to the [`/analyze`](/v1.3/api-reference/analyze-videos/analyze) endpoint, which provides identical functionality. Ensure you've updated your API calls before the deprecation date to ensure uninterrupted service.</Warning>
     *
     * This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.
     *
     * <Note title="Notes">
     * - This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/v1.3/docs/guides/generate-text-from-video/open-ended-text#streaming-responses) guide.
     * </Note>
     *
     * @param {TwelvelabsApi.GenerateRequest} request
     * @param {TwelvelabsApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     * @throws {@link TwelvelabsApi.TooManyRequestsError}
     *
     * @example
     *     await client.generate({
     *         videoId: "6298d673f1090f1100476d4c",
     *         prompt: "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
     *         temperature: 0.2,
     *         stream: true
     *     })
     */
    public generate(
        request: TwelvelabsApi.GenerateRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.GenerateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__generate(request, requestOptions));
    }

    private async __generate(
        request: TwelvelabsApi.GenerateRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.GenerateResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "generate",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.GenerateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GenerateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /generate.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint analyzes your videos and creates fully customizable text based on your prompts, including but not limited to tables of content, action items, memos, and detailed analyses.
     *
     * <Note title="Notes">
     * - This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/v1.3/docs/guides/generate-text-from-video/open-ended-text#streaming-responses) guide.
     * </Note>
     */
    public analyzeStream(
        request: TwelvelabsApi.AnalyzeStreamRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<TwelvelabsApi.StreamAnalyzeResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__analyzeStream(request, requestOptions));
    }

    private async __analyzeStream(
        request: TwelvelabsApi.AnalyzeStreamRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<TwelvelabsApi.StreamAnalyzeResponse>>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "analyze",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: {
                ...serializers.AnalyzeStreamRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                stream: true,
            },
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.StreamAnalyzeResponse.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /analyze.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint analyzes your videos and creates fully customizable text based on your prompts, including but not limited to tables of content, action items, memos, and detailed analyses.
     *
     * <Note title="Notes">
     * - This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/v1.3/docs/guides/generate-text-from-video/open-ended-text#streaming-responses) guide.
     * </Note>
     *
     * @param {TwelvelabsApi.AnalyzeRequest} request
     * @param {TwelvelabsApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     * @throws {@link TwelvelabsApi.TooManyRequestsError}
     *
     * @example
     *     await client.analyze({
     *         videoId: "6298d673f1090f1100476d4c",
     *         prompt: "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
     *         temperature: 0.2
     *     })
     */
    public analyze(
        request: TwelvelabsApi.AnalyzeRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.NonStreamAnalyzeResponse> {
        return core.HttpResponsePromise.fromPromise(this.__analyze(request, requestOptions));
    }

    private async __analyze(
        request: TwelvelabsApi.AnalyzeRequest,
        requestOptions?: TwelvelabsApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.NonStreamAnalyzeResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "analyze",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: {
                ...serializers.AnalyzeRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                stream: false,
            },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.NonStreamAnalyzeResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /analyze.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TWELVE_LABS_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
