/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as TwelvelabsApi from "../../api/index";
import * as core from "../../core";
import { SummarizeSummaryResult } from "./SummarizeSummaryResult";
import { SummarizeChapterResult } from "./SummarizeChapterResult";
import { SummarizeHighlightResult } from "./SummarizeHighlightResult";

export const SummarizeResponse: core.serialization.Schema<
    serializers.SummarizeResponse.Raw,
    TwelvelabsApi.SummarizeResponse
> = core.serialization
    .union(core.serialization.discriminant("summarizeType", "summarize_type"), {
        summary: SummarizeSummaryResult,
        chapter: SummarizeChapterResult,
        highlight: SummarizeHighlightResult,
    })
    .transform<TwelvelabsApi.SummarizeResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SummarizeResponse {
    export type Raw = SummarizeResponse.Summary | SummarizeResponse.Chapter | SummarizeResponse.Highlight;

    export interface Summary extends SummarizeSummaryResult.Raw {
        summarize_type: "summary";
    }

    export interface Chapter extends SummarizeChapterResult.Raw {
        summarize_type: "chapter";
    }

    export interface Highlight extends SummarizeHighlightResult.Raw {
        summarize_type: "highlight";
    }
}
