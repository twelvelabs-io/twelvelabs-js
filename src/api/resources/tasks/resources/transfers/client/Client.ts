/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as TwelvelabsApi from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace Transfers {
    export interface Options {
        environment?: core.Supplier<environments.TwelvelabsApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Transfers {
    constructor(protected readonly _options: Transfers.Options = {}) {}

    /**
     * An import represents the process of uploading and indexing all videos from the specified integration.
     *
     * This method initiates an asynchronous import and returns two lists:
     * - Videos that will be imported.
     * - Videos that will not be imported, typically because they do not meet the prerequisites of all enabled video understanding models for your index. Note that the most restrictive prerequisites among the enabled models will apply.
     *
     * The actual uploading and indexing of videos occur asynchronously after you invoke this method. To monitor the status of each upload after invoking this method, use the [Retrieve import status](/v1.3/api-reference/tasks/cloud-to-cloud-integrations/get-status) method.
     *
     * <Accordion title="Video requirements">
     *   The videos you wish to upload must meet the following requirements:
     *   - **Video resolution**: Must be at least 360x360 and must not exceed 3840x2160.
     *   - **Aspect ratio**: Must be one of 1:1, 4:3, 4:5, 5:4, 16:9, 9:16, or 17:9.
     *   - **Video and audio formats**: Your video files must be encoded in the video and audio formats listed on the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html) page. For videos in other formats, contact us at support@twelvelabs.io.
     *   - **Duration**: For Marengo, it must be between 4 seconds and 2 hours (7,200s). For Pegasus, it must be between 4 seconds and 60 minutes (3600s). In a future release, the maximum duration for Pegasus will be 2 hours (7,200 seconds).
     *   - **File size**: Must not exceed 2 GB.
     *     If you require different options, contact us at support@twelvelabs.io.
     *
     *   If both Marengo and Pegasus are enabled for your index, the most restrictive prerequisites will apply.
     * </Accordion>
     *
     * <Note title="Notes">
     * - Before importing videos, you must set up an integration. For details, see the [Set up an integration](/v1.3/docs/advanced/cloud-to-cloud-integrations#set-up-an-integration) section.
     * - By default, the platform checks for duplicate files using hashes within the target index and will not upload the same video to the same index twice. However, the same video can exist in multiple indexes. To bypass duplicate checking entirely and import duplicate videos into the same index, set the value of the `incremental_import` parameter to `false`.
     * - Only one import job can run at a time. To start a new import, wait for the current job to complete. Use the [`GET`](/v1.3/api-reference/tasks/cloud-to-cloud-integrations/get-status) method of the `/tasks/transfers/import/{integration-id}/logs` endpoint to retrieve a list of your import jobs, including their creation time, completion time, and processing status for each video file.
     * </Note>
     *
     * @param {string} integrationId - The unique identifier of the integration for which you want to import videos. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
     * @param {TwelvelabsApi.tasks.TransfersCreateRequest} request
     * @param {Transfers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.tasks.transfers.create("6298d673f1090f1100476d4c", {
     *         indexId: "6298d673f1090f1100476d4c",
     *         incrementalImport: true,
     *         retryFailed: false,
     *         userMetadata: {
     *             "category": "recentlyAdded",
     *             "batchNumber": 5
     *         }
     *     })
     */
    public create(
        integrationId: string,
        request: TwelvelabsApi.tasks.TransfersCreateRequest,
        requestOptions?: Transfers.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.tasks.TransfersCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(integrationId, request, requestOptions));
    }

    private async __create(
        integrationId: string,
        request: TwelvelabsApi.tasks.TransfersCreateRequest,
        requestOptions?: Transfers.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.tasks.TransfersCreateResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `tasks/transfers/import/${encodeURIComponent(integrationId)}`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.tasks.TransfersCreateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.tasks.TransfersCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError(
                    "Timeout exceeded when calling POST /tasks/transfers/import/{integration-id}.",
                );
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This method retrieves the current status for each video from a specified integration and index. It returns an object containing lists of videos grouped by status. See the [Task object](/v1.3/api-reference/tasks/the-task-object) page for details on each status.
     *
     * @param {string} integrationId - The unique identifier of the integration for which you want to retrieve the status of your imported videos. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
     * @param {TwelvelabsApi.tasks.TransfersGetStatusRequest} request
     * @param {Transfers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.tasks.transfers.getStatus("6298d673f1090f1100476d4c", {
     *         indexId: "6298d673f1090f1100476d4c"
     *     })
     */
    public getStatus(
        integrationId: string,
        request: TwelvelabsApi.tasks.TransfersGetStatusRequest,
        requestOptions?: Transfers.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.tasks.TransfersGetStatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getStatus(integrationId, request, requestOptions));
    }

    private async __getStatus(
        integrationId: string,
        request: TwelvelabsApi.tasks.TransfersGetStatusRequest,
        requestOptions?: Transfers.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.tasks.TransfersGetStatusResponse>> {
        const { indexId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["index_id"] = indexId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `tasks/transfers/import/${encodeURIComponent(integrationId)}/status`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.tasks.TransfersGetStatusResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError(
                    "Timeout exceeded when calling GET /tasks/transfers/import/{integration-id}/status.",
                );
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint returns a chronological list of import operations for the specified integration. The list is sorted by creation date, with the oldest imports first. Each item in the list contains:
     * - The number of videos in each status
     * - Detailed error information for failed uploads, including filenames and error messages.
     *
     * Use this endpoint to track import progress and troubleshoot potential issues across multiple operations.
     *
     * @param {string} integrationId - The unique identifier of the integration for which you want to retrieve the import logs. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
     * @param {Transfers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.tasks.transfers.getLogs("6298d673f1090f1100476d4c")
     */
    public getLogs(
        integrationId: string,
        requestOptions?: Transfers.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.tasks.TransfersGetLogsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getLogs(integrationId, requestOptions));
    }

    private async __getLogs(
        integrationId: string,
        requestOptions?: Transfers.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.tasks.TransfersGetLogsResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `tasks/transfers/import/${encodeURIComponent(integrationId)}/logs`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.tasks.TransfersGetLogsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError(
                    "Timeout exceeded when calling GET /tasks/transfers/import/{integration-id}/logs.",
                );
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TWELVE_LABS_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
