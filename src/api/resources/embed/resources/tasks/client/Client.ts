/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as TwelvelabsApi from "../../../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";

export declare namespace Tasks {
    export interface Options {
        environment?: core.Supplier<environments.TwelvelabsApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Tasks {
    constructor(protected readonly _options: Tasks.Options = {}) {}

    /**
     * This method returns a list of the video embedding tasks in your account. The platform returns your video embedding tasks sorted by creation date, with the newest at the top of the list.
     *
     * <Note title="Notes">
     * - Video embeddings are stored for seven days
     * - When you invoke this method without specifying the `started_at` and `ended_at` parameters, the platform returns all the video embedding tasks created within the last seven days.
     * </Note>
     *
     * @param {TwelvelabsApi.embed.TasksListRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.embed.tasks.list({
     *         startedAt: "2024-03-01T00:00:00Z",
     *         endedAt: "2024-03-01T00:00:00Z",
     *         status: "processing",
     *         page: 1,
     *         pageLimit: 10
     *     })
     */
    public async list(
        request: TwelvelabsApi.embed.TasksListRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.Page<TwelvelabsApi.VideoEmbeddingTask>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: TwelvelabsApi.embed.TasksListRequest,
            ): Promise<core.WithRawResponse<TwelvelabsApi.embed.TasksListResponse>> => {
                const { startedAt, endedAt, status, page, pageLimit } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (startedAt != null) {
                    _queryParams["started_at"] = startedAt;
                }
                if (endedAt != null) {
                    _queryParams["ended_at"] = endedAt;
                }
                if (status != null) {
                    _queryParams["status"] = status;
                }
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (pageLimit != null) {
                    _queryParams["page_limit"] = pageLimit.toString();
                }
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.TwelvelabsApiEnvironment.Default,
                        "embed/tasks",
                    ),
                    method: "GET",
                    headers: {
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "twelvelabs-js",
                        "X-Fern-SDK-Version": "1.0.0-alpha.0",
                        "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...(await this._getCustomAuthorizationHeaders()),
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.embed.TasksListResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                        default:
                            throw new errors.TwelvelabsApiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.TwelvelabsApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling GET /embed/tasks.");
                    case "unknown":
                        throw new errors.TwelvelabsApiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<TwelvelabsApi.embed.TasksListResponse, TwelvelabsApi.VideoEmbeddingTask>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings.
     *
     * Upload options:
     * - **Local file**: Use the `video_file` parameter
     * - **Publicly accessible URL**: Use the `video_url` parameter.
     *
     * Specify at least one option. If both are provided, `video_url` takes precedence.
     *
     * <Accordion title="Video requirements">
     *   The videos you wish to upload must meet the following requirements:
     *   - **Video resolution**: Must be at least 360x360 and must not exceed 3840x2160.
     *   - **Aspect ratio**: Must be one of 1:1, 4:3, 4:5, 5:4, 16:9, 9:16, or 17:9.
     *   - **Video and audio formats**: Your video files must be encoded in the video and audio formats listed on the [FFmpeg Formats Documentation](https://ffmpeg.org/ffmpeg-formats.html) page. For videos in other formats, contact us at support@twelvelabs.io.
     *   - **Duration**: Must be between 4 seconds and 2 hours (7,200s).
     *   - **File size**: Must not exceed 2 GB.
     *     If you require different options, contact us at support@twelvelabs.io.
     * </Accordion>
     *
     * <Note title="Notes">
     * - The "Marengo-retrieval-2.7" video understanding model generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.
     * - Video embeddings are stored for seven days.
     * - The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
     * </Note>
     *
     * @param {TwelvelabsApi.embed.TasksCreateRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.embed.tasks.create({
     *         modelName: "model_name"
     *     })
     */
    public create(
        request: TwelvelabsApi.embed.TasksCreateRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.embed.TasksCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: TwelvelabsApi.embed.TasksCreateRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.embed.TasksCreateResponse>> {
        const _request = await core.newFormData();
        _request.append("model_name", request.modelName);
        if (request.videoFile != null) {
            await _request.appendFile("video_file", request.videoFile);
        }

        if (request.videoUrl != null) {
            _request.append("video_url", request.videoUrl);
        }

        if (request.videoStartOffsetSec != null) {
            _request.append("video_start_offset_sec", request.videoStartOffsetSec.toString());
        }

        if (request.videoEndOffsetSec != null) {
            _request.append("video_end_offset_sec", request.videoEndOffsetSec.toString());
        }

        if (request.videoClipLength != null) {
            _request.append("video_clip_length", request.videoClipLength.toString());
        }

        if (request.videoEmbeddingScope != null) {
            for (const _item of request.videoEmbeddingScope) {
                _request.append(
                    "video_embedding_scope",
                    serializers.embed.TasksCreateRequestVideoEmbeddingScopeItem.jsonOrThrow(_item, {
                        unrecognizedObjectKeys: "strip",
                    }),
                );
            }
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "embed/tasks",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.embed.TasksCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /embed/tasks.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This method retrieves the status of a video embedding task. Check the task status of a video embedding task to determine when you can retrieve the embedding.
     *
     * A task can have one of the following statuses:
     * - `processing`: The platform is creating the embeddings.
     * - `ready`:  Processing is complete. Retrieve the embeddings by invoking the [`GET`](/v1.3/api-reference/video-embeddings/retrieve-video-embeddings) method of the `/embed/tasks/{task_id} endpoint`.
     * - `failed`: The task could not be completed, and the embeddings haven't been created.
     *
     * @param {string} taskId - The unique identifier of your video embedding task.
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.embed.tasks.status("663da73b31cdd0c1f638a8e6")
     */
    public status(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.embed.TasksStatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__status(taskId, requestOptions));
    }

    private async __status(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.embed.TasksStatusResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `embed/tasks/${encodeURIComponent(taskId)}/status`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.embed.TasksStatusResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError(
                    "Timeout exceeded when calling GET /embed/tasks/{task_id}/status.",
                );
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve the status of a video embedding tasks](/v1.3/api-reference/video-embeddings/retrieve-video-embedding-task-status) page for instructions on checking the task status.
     *
     * @param {string} taskId - The unique identifier of your video embedding task.
     * @param {TwelvelabsApi.embed.TasksRetrieveRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.embed.tasks.retrieve("663da73b31cdd0c1f638a8e6")
     */
    public retrieve(
        taskId: string,
        request: TwelvelabsApi.embed.TasksRetrieveRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.embed.TasksRetrieveResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(taskId, request, requestOptions));
    }

    private async __retrieve(
        taskId: string,
        request: TwelvelabsApi.embed.TasksRetrieveRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.embed.TasksRetrieveResponse>> {
        const { embeddingOption } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (embeddingOption != null) {
            if (Array.isArray(embeddingOption)) {
                _queryParams["embedding_option"] = embeddingOption.map((item) =>
                    serializers.embed.TasksRetrieveRequestEmbeddingOptionItem.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                    }),
                );
            } else {
                _queryParams["embedding_option"] =
                    serializers.embed.TasksRetrieveRequestEmbeddingOptionItem.jsonOrThrow(embeddingOption, {
                        unrecognizedObjectKeys: "strip",
                    });
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `embed/tasks/${encodeURIComponent(taskId)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0-alpha.0",
                "User-Agent": "twelvelabs-js/1.0.0-alpha.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.embed.TasksRetrieveResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling GET /embed/tasks/{task_id}.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TWELVE_LABS_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
