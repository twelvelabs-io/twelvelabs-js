/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TwelvelabsApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace ManageVideos {
    export interface Options {
        environment?: core.Supplier<environments.TwelvelabsApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ManageVideos {
    constructor(protected readonly _options: ManageVideos.Options = {}) {}

    /**
     * Use this method to update one or more fields of the metadata of a video. Also, you can delete a field by setting it to `null`.
     *
     * @param {string} indexId - The unique identifier of the index to which the video has been uploaded.
     * @param {string} videoId - The unique identifier of the video to update.
     * @param {TwelvelabsApi.PartialUpdateVideoInformationRequest} request
     * @param {ManageVideos.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.manageVideos.partialUpdateVideoInformation("6298d673f1090f1100476d4c", "6298d673f1090f1100476d4c", {
     *         userMetadata: {
     *             "category": "recentlyAdded",
     *             "batchNumber": 5,
     *             "rating": 9.3,
     *             "needsReview": true
     *         }
     *     })
     */
    public partialUpdateVideoInformation(
        indexId: string,
        videoId: string,
        request: TwelvelabsApi.PartialUpdateVideoInformationRequest = {},
        requestOptions?: ManageVideos.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(
            this.__partialUpdateVideoInformation(indexId, videoId, request, requestOptions),
        );
    }

    private async __partialUpdateVideoInformation(
        indexId: string,
        videoId: string,
        request: TwelvelabsApi.PartialUpdateVideoInformationRequest = {},
        requestOptions?: ManageVideos.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `indexes/${encodeURIComponent(indexId)}/videos/${encodeURIComponent(videoId)}`,
            ),
            method: "PATCH",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.0",
                "User-Agent": "twelvelabs-js/1.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PartialUpdateVideoInformationRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError(
                    "Timeout exceeded when calling PATCH /indexes/{index-id}/videos/{video-id}.",
                );
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TWELVE_LABS_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
