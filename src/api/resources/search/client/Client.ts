/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as TwelvelabsApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Search {
    export interface Options {
        environment?: core.Supplier<environments.TwelvelabsApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Search {
    constructor(protected readonly _options: Search.Options = {}) {}

    /**
     * Use this endpoint to search for relevant matches in an index using text or various media queries.
     *
     * **Text queries**:
     * - Use the `query_text` parameter to specify your query.
     *
     * **Media queries**:
     * - Set the `query_media_type` parameter to the corresponding media type (example: `image`).
     * - Specify either one of the following parameters:
     *   - `query_media_url`: Publicly accessible URL of your media file.
     *   - `query_media_file`: Local media file.
     *   If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.
     * <Accordion title="Image requirements">
     * Your images must meet the following requirements:
     *   - **Format**: JPEG and PNG.
     *   - **Dimension**: Must be at least 64 x 64 pixels.
     *   - **Size**: Must not exceed 5MB.
     * </Accordion>
     *
     * <Note title="Note">
     * This endpoint is rate-limited. For details, see the [Rate limits](/v1.3/docs/get-started/rate-limits) page.
     * </Note>
     *
     * @param {TwelvelabsApi.SearchCreateRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     * @throws {@link TwelvelabsApi.TooManyRequestsError}
     *
     * @example
     *     await client.search.create({
     *         indexId: "index_id",
     *         searchOptions: ["visual"]
     *     })
     */
    public create(
        request: TwelvelabsApi.SearchCreateRequest,
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.SearchResults> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: TwelvelabsApi.SearchCreateRequest,
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.SearchResults>> {
        const _request = await core.newFormData();
        if (request.queryMediaType != null) {
            _request.append("query_media_type", request.queryMediaType);
        }

        if (request.queryMediaUrl != null) {
            _request.append("query_media_url", request.queryMediaUrl);
        }

        if (request.queryMediaFile != null) {
            await _request.appendFile("query_media_file", request.queryMediaFile);
        }

        if (request.queryText != null) {
            _request.append("query_text", request.queryText);
        }

        _request.append("index_id", request.indexId);
        for (const _item of request.searchOptions) {
            _request.append(
                "search_options",
                serializers.SearchCreateRequestSearchOptionsItem.jsonOrThrow(_item, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        if (request.adjustConfidenceLevel != null) {
            _request.append("adjust_confidence_level", request.adjustConfidenceLevel.toString());
        }

        if (request.groupBy != null) {
            _request.append(
                "group_by",
                serializers.SearchCreateRequestGroupBy.jsonOrThrow(request.groupBy, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        if (request.threshold != null) {
            _request.append(
                "threshold",
                serializers.ThresholdSearch.jsonOrThrow(request.threshold, { unrecognizedObjectKeys: "strip" }),
            );
        }

        if (request.sortOption != null) {
            _request.append(
                "sort_option",
                serializers.SearchCreateRequestSortOption.jsonOrThrow(request.sortOption, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        if (request.operator != null) {
            _request.append(
                "operator",
                serializers.SearchCreateRequestOperator.jsonOrThrow(request.operator, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        if (request.pageLimit != null) {
            _request.append("page_limit", request.pageLimit.toString());
        }

        if (request.filter != null) {
            _request.append("filter", request.filter);
        }

        if (request.includeUserMetadata != null) {
            _request.append("include_user_metadata", request.includeUserMetadata.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                "search",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "twelvelabs-js/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchResults.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                case 429:
                    throw new TwelvelabsApi.TooManyRequestsError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling POST /search.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Use this endpoint to retrieve a specific page of search results.
     *
     * <Note title="Note">
     * When you use pagination, you will not be charged for retrieving subsequent pages of results.
     * </Note>
     *
     * @param {string} pageToken - A token that identifies the page to retrieve.
     * @param {TwelvelabsApi.SearchRetrieveRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link TwelvelabsApi.BadRequestError}
     *
     * @example
     *     await client.search.retrieve("1234567890", {
     *         includeUserMetadata: true
     *     })
     */
    public retrieve(
        pageToken: string,
        request: TwelvelabsApi.SearchRetrieveRequest = {},
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<TwelvelabsApi.SearchRetrieveResponse> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(pageToken, request, requestOptions));
    }

    private async __retrieve(
        pageToken: string,
        request: TwelvelabsApi.SearchRetrieveRequest = {},
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<TwelvelabsApi.SearchRetrieveResponse>> {
        const { includeUserMetadata } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeUserMetadata != null) {
            _queryParams["include_user_metadata"] = includeUserMetadata.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.TwelvelabsApiEnvironment.Default,
                `search/${encodeURIComponent(pageToken)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "twelvelabs-js",
                "X-Fern-SDK-Version": "1.0.2",
                "User-Agent": "twelvelabs-js/1.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchRetrieveResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new TwelvelabsApi.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.TwelvelabsApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.TwelvelabsApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.TwelvelabsApiTimeoutError("Timeout exceeded when calling GET /search/{page-token}.");
            case "unknown":
                throw new errors.TwelvelabsApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["TWELVE_LABS_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
